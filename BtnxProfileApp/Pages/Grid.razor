@page "/grid"
@inject HttpClient Http

<div class="grid-container">
   <button class="view-profiles-button" @onclick="ToggleTableVisibility">
        @if (showTable)
        {
            <span>Hide Created Profiles</span>
        }
        else
        {
            <span>View All Created Profiles</span>
        }
    </button>

    @if (showTable)
    {
        @if (profiles == null)
        {
            <p>Loading...</p>
        }
        else if (profiles.Count == 0)
        {
            <p>No Profiles created</p>
        }
        else
        {
            <div class="table-wrapper">
                <table class="profile-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var profile in profiles)
                        {
                            <tr>
                                 <td style="text-align: center;">@profile.Id</td>
                                <td><p class="name">@profile.FirstName @profile.LastName</p></td>
                                <td><p class="email">@profile.Email</p></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    private List<PersonProfile>? profiles;
    private bool showTable = false; 

    public void RefreshGrid()
    {
        LoadProfiles();
    }

    private async Task LoadProfiles()
    {
        profiles = await Http.GetFromJsonAsync<List<PersonProfile>>("http://localhost:5031/api/Profile/GetList");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            profiles = await Http.GetFromJsonAsync<List<PersonProfile>>("http://localhost:5031/api/Profile/GetList");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            profiles = new List<PersonProfile>(); 
        }
    }


    private void ToggleTableVisibility()
    {
        showTable = !showTable;
    }

    public class PersonProfile
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? Phone { get; set; }
    }
}

<style>
.grid-container {
    width: 100%;
    text-align: center; 
    margin-top: 2.5rem;
}


.grid-container h2 {
    font-size: 1.75rem;
    font-weight: bold;
    margin-bottom: 1.5rem;
    color: #333;
}


.view-profiles-button {
    background-color: #28a745;
    color: white; 
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 5px;
    font-size: 1.1rem;
    cursor: pointer;
    margin-bottom: 1rem;
    font-weight: bold;
}

.view-profiles-button:hover {
    background-color: #218838; 
}

.table-wrapper {
    overflow: auto;
    max-height: 500px; 
    width: 100%;
    margin-top: 1rem;
    position: relative;
}

.profile-table {
    width: 100%;
    border-collapse: collapse;
}

.profile-table thead th {
    position: sticky;
    top: 0;
    z-index: 2;
    background-color: #f5f5f5;
    font-size: 1.3rem;
    text-align: center;
    border: 1px solid #ddd;
}

.profile-table th, .profile-table td {
    padding: 1rem;
    text-align: left;
    border: 1px solid #ddd;
    font-size: 1.2rem; 
}

.profile-table th {
    background-color: #f5f5f5;
    font-weight: bold;
    color: #333;
}

.profile-table td {
    color: #555;
    position: relative;
}

.email, .name {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 8em;
}
}

.profile-table tbody tr:hover td {
    background-color: #f0f0f0; 
}
</style>

@page "/updateprofile"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations

<h3>Update Profile</h3>


<div class="form-group">
    <label>Enter Profile ID: </label>
    <InputText @bind-Value="enteredId" class="form-control" />
    <button class="btn btn-primary mt-2" @onclick="FetchProfile">Fetch Profile</button>
</div>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}


@if (profile.Id > 0)
{
    <EditForm Model="profile" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="form-group">
            <label>First Name:</label>
            <InputText @bind-Value="profile.FirstName" class="form-control" />
            <ValidationMessage For="@(() => profile.FirstName)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Last Name:</label>
            <InputText @bind-Value="profile.LastName" class="form-control" />
            <ValidationMessage For="@(() => profile.LastName)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="profile.Email" class="form-control" />
            <ValidationMessage For="@(() => profile.Email)" class="text-danger" />
        </div>

        <div class="form-group">
            <label>Phone:</label>
            <InputText @bind-Value="profile.Phone" class="form-control" />
            <ValidationMessage For="@(() => profile.Phone)" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-success mt-3">Update</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">
            @successMessage
        </div>
    }
}

@code {
     #nullable enable
    [Parameter] public EventCallback OnProfileCreated { get; set; }
    private string? enteredId;
    private PersonProfile profile = new PersonProfile();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;


    private async Task FetchProfile()
    {
        if (int.TryParse(enteredId, out int id) && id > 0)
        {
            try
            {
                profile = await Http.GetFromJsonAsync<PersonProfile>($"http://localhost:5031/api/Profile/{id}");
                if (profile == null)
                {
                    errorMessage = "Profile not found.";
                    profile = new PersonProfile();
                }
                else
                {
                    errorMessage = string.Empty; 
                    successMessage = string.Empty;
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error fetching profile: {ex.Message}";
            }
        }
        else
        {
            errorMessage = "Please enter a valid ID.";
        }
    }


    private async Task HandleSubmit()
    {
        if (profile.Id > 0)
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5031/api/Profile/{profile.Id}", profile);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Profile updated successfully.");

                successMessage = "Profile updated successfully.";
                await OnProfileCreated.InvokeAsync();
                profile = new PersonProfile();
                enteredId = string.Empty;
            }
            else
            {
                errorMessage = "Error updating profile.";
            }

            StateHasChanged();
        }
        else
        {
            errorMessage = "Invalid profile ID.";
        }
    }

    public class PersonProfile
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "First Name is required.")]
        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "First Name should be a valid string.")]
        public string? FirstName { get; set; }

        [RegularExpression(@"^[a-zA-Z]+$", ErrorMessage = "Last Name should be a valid string.")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Phone is required.")]
        [RegularExpression(@"^\+?[1-9]\d{1,14}$", ErrorMessage = "Invalid phone number.")]
        public string? Phone { get; set; }
    }
}

<style>
    .form-group {
        margin-bottom: 1.5rem;
    }

    label {
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    .btn {
        font-weight: 400;
        padding: 0.375rem 0.75rem;
        color: #fff;
        text-decoration: none;
        border-radius: 0.25rem;
    }

    .btn-primary {
        background-color: #007bff;
        border: 1px solid transparent;
    }

    .btn-success {
        background-color: #28a745;
        border: 1px solid transparent;
    }

    .alert {
        padding: 0.75rem 1.25rem;
        margin-top: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }
</style>
